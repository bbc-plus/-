#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using u64 = unsigned long long;

void solve()
{
    int n, m;
    cin >> n >> m;
    vector<bool> vis(n + 1, 0);
    vector<vector<int>> e(n + 1);
    auto Hash = [&](auto self, int u, int fa) -> pair<u64, u64>
    {
        u64 res = 1, res2 = 1;
        vector<u64> num, num2;
        for (int v : e[u])
        {
            if (v != fa && vis[v] != 1)
            {
                auto ret = self(self, v, u);
                num.push_back(ret.first);
                num2.push_back(ret.second);
            }
        }
        sort(num.begin(), num.end());
        sort(num2.begin(), num2.end());
        for (u64 x : num)
            res += x * 131 ^ 133331;
        for (u64 x2 : num2)
            res2 += x2 * 1145141 ^ (u64)(1e9 + 411);
        return {res, res2};
    };
    for (int i = 1; i <= m; i++)
    {
        int u, v;
        cin >> u >> v;
        e[u].push_back(v);
        e[v].push_back(u);
    }
    if (m == n - 1)
    {
        cout << "YES\n";
        return;
    }
    else if (m > n)
    {
        cout << "NO\n";
        return;
    }

    vector<int> dfn(n + 1, 0);
    int id = 0;
    vector<int> pre(n + 1, 0);
    vector<int> loop;
    auto dfs_1 = [&](auto self, int u)
    {
        dfn[u] = ++id;
        for (int i = 0; i < e[u].size(); i++)
        {
            int j = e[u][i];
            if (j == pre[u])
                continue;
            if (dfn[j])
            {
                if (dfn[j] < dfn[u])
                    continue;
                loop.push_back(j);
                for (; j != u; j = pre[j])
                    loop.push_back(pre[j]);
                return;
            }
            else
            {
                pre[j] = u;
                self(self, j);
            }
        }
        return;
    };
    dfs_1(dfs_1, 1);

    int len = loop.size();
    assert(len >= 3);
    for (int i = 0; i < len; i++)
    {
        vis[loop[i]] = 1;
    }
    if (len & 1)
    {
        vector<pair<int, int>> val;
        for (int i = 0; i < len; i++)
        {
            val.push_back(Hash(Hash, loop[i], 0));
        }
        for (int i = 0; i < len - 1; i++)
        {
            if (val[i] != val[i + 1])
            {
                cout << "NO\n";
                return;
            }
        }
        cout << "YES\n";
    }
    else
    {
        vector<pair<int, int>> val;
        for (int i = 0; i < len; i++)
        {
            val.push_back(Hash(Hash, loop[i], 0));
        }
        for (int i = 0; i < len - 2; i++)
        {
            if (val[i] != val[i + 2])
            {
                cout << "NO\n";
                return;
            }
        }
        cout << "YES\n";
    }
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int T = 1;
    cin >> T;
    while (T--)
    {
        solve();
    }

    return 0;
}
