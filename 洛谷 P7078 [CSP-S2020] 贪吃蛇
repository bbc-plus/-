#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using u64 = unsigned long long;

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int T = 1;
    cin >> T;
    vector<int> a;
    for (int t = 1; t <= T; t++)
    {
        if (t == 1)
        {
            int n;
            cin >> n;
            a.resize(n);
            for (int i = 0; i < n; i++)
            {
                cin >> a[i];
            }
        }
        else
        {
            int k;
            cin >> k;
            for (int i = 0; i < k; i++)
            {
                int x, y;
                cin >> x >> y;
                x--;
                a[x] = y;
            }
        }
        deque<pair<int, int>> q1, q2;
        for (int i = 0; i < a.size(); i++)
        {
            q1.push_back({a[i], i});
        }
        while (q1.size() + q2.size() >= 3)
        {
            auto minn = q1.front();
            q1.pop_front();
            pair<int, int> tmp;
            int pos = -1;
            if (q2.empty() || (!q1.empty() && q1.back() > q2.back()))
            {
                tmp = q1.back();
                q1.pop_back();
                pos = 1;
            }
            else
            {
                tmp = q2.back();
                q2.pop_back();
                pos = 2;
            }
            pair<int, int> cur = {tmp.first - minn.first, tmp.second};
            if (q1.empty() || cur < q1.front())
            {
                q1.push_front(minn);
                if (pos == 1)
                    q1.push_back(tmp);
                else
                    q2.push_back(tmp);
                break;
            }
            else
            {
                q2.push_front(cur);
            }
        }
        int ans = q1.size() + q2.size();
        int cnt = 1;
        while (q1.size() + q2.size() >= 3)
        {
            auto minn = q1.front();
            q1.pop_front();
            pair<int, int> tmp;
            if (q2.empty() || (!q1.empty() && q1.back() > q2.back()))
            {
                tmp = q1.back();
                q1.pop_back();
            }
            else
            {
                tmp = q2.back();
                q2.pop_back();
            }
            pair<int, int> cur = {tmp.first - minn.first, tmp.second};
            if (q1.empty() || ((cur < q1.front() && (q2.empty() || cur < q2.front()))))
            {
                q1.push_front(cur);
            }
            else
            {
                break;
            }
            cnt++;
        }
        cout << ans - (cnt & 1) << '\n';
    }

    return 0;
}
