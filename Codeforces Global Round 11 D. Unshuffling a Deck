#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using u64 = unsigned long long;

void solve()
{
    int n;
    cin >> n;
    vector<int> c(n);
    vector<vector<int>> ans;
    for (int i = 0; i < n; i++)
    {
        cin >> c[i];
    }
    vector<int> op;
    int l = 1, r = n;
    int cho = 1;
    while (l <= r)
    {
        if ((cho == 1) ^ (!(n & 1)))
        {
            op.push_back(l);
            l++;
        }
        else
        {
            op.push_back(r);
            r--;
        }
        cho *= -1;
    }
    assert(op.size() == n);
    auto check = [&]() -> bool
    {
        for (int i = 0; i < n; i++)
        {
            if (c[i] != i + 1)
                return 0;
        }
        return 1;
    };
    int cnt = 0;
    auto rev = [&](int val) -> void
    {
        vector<vector<int>> tmp;
        int pos = find(c.begin(), c.end(), val) - c.begin();
        vector<int> cur;
        for (int i = 0; i < pos; i++)
        {
            cur.push_back(c[i]);
            tmp.push_back(cur);
            cur.clear();
        }
        for (int i = pos; i < n - cnt / 2; i++)
        {
            cur.push_back(c[i]);
        }
        assert(cur.empty() == 0);
        tmp.push_back(cur);
        cur.clear();
        for (int i = n - cnt / 2; i < n; i++)
        {
            cur.push_back(c[i]);
            tmp.push_back(cur);
            cur.clear();
        }
        vector<int> nc;
        if (tmp.size() != 1)
        {
            vector<int> t;
            t.push_back(tmp.size());
            for (int i = 0; i < tmp.size(); i++)
            {
                t.push_back(tmp[i].size());
            }
            ans.push_back(t);
        }
        reverse(tmp.begin(), tmp.end());
        for (int i = 0; i < tmp.size(); i++)
        {
            for (int j = 0; j < tmp[i].size(); j++)
            {
                nc.push_back(tmp[i][j]);
            }
        }
        c = nc;
        cnt++;
    };
    for (int i = 0; i < op.size(); i++)
    {
        if (check())
            break;
        rev(op[i]);
    }
    assert(check() == 1);
    assert(ans.size() <= n);
    cout << ans.size() << '\n';
    for (int i = 0; i < ans.size(); i++)
    {
        for (int j = 0; j < ans[i].size(); j++)
        {
            cout << ans[i][j] << " \n"[j == ans[i].size() - 1];
        }
    }
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int T = 1;
    // cin >> T;
    while (T--)
    {
        solve();
    }

    return 0;
}
