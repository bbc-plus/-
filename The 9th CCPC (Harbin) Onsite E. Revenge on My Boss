#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using u64 = unsigned long long;

void solve()
{
    int n;
    cin >> n;
    vector<int> a(n + 1), b(n + 1), c(n + 1);
    vector<i64> num(n + 1);
    vector<pair<int, int>> dif(n + 1);
    i64 sumb = 0;

    for (int i = 1; i <= n; i++)
    {
        cin >> a[i] >> b[i] >> c[i];
        dif[i].first = a[i] - b[i];
        dif[i].second = i;
        sumb += b[i];
    }

    sort(dif.begin() + 1, dif.end());
    int pos = n + 1;
    for (int i = 1; i <= n; i++)
    {
        if (dif[i].first > 0)
        {
            pos = i;
            break;
        }
    }

    auto check = [&](i64 Mid) -> bool
    {
        for (int i = 1; i <= n; i++)
        {
            num[i] = Mid / c[i] - sumb - b[i];
        }
        sort(dif.begin() + 1, dif.begin() + pos, [&](pair<int, int> a, pair<int, int> b)
             { return num[a.second] - a.first > num[b.second] - b.first; });
        if (pos <= n)
        {
            sort(dif.begin() + pos, dif.end(), [&](pair<int, int> a, pair<int, int> b)
                 { return num[a.second] < num[b.second]; });
        }
        i64 tmp = 0;
        for (int i = 1; i <= n; i++)
        {
            tmp += dif[i].first;
            if (tmp > num[dif[i].second])
            {
                return 0;
            }
        }
        return 1;
    };

    i64 l = 0, r = 1e18;
    while (l < r)
    {
        i64 mid = (l + r) >> 1;
        if (check(mid))
        {
            r = mid;
        }
        else
        {
            l = mid + 1;
        }
    }

    check(l);
    for (int i = 1; i <= n; i++)
    {
        cout << dif[i].second << " \n"[i == n];
    }
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int T = 1;
    cin >> T;
    while (T--)
    {
        solve();
    }

    return 0;
}
