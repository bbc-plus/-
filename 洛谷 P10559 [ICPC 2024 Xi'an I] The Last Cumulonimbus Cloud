#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using u64 = unsigned long long;

// 这题怎么快读才能过啊（恼

inline int read()
{
    int x = 0, f = 1;
    char ch = getchar();
    while (ch < '0' || ch > '9')
    {
        if (ch == '-')
            f = -1;
        ch = getchar();
    }
    while (ch >= '0' && ch <= '9')
    {
        x = (x << 1) + (x << 3) + (ch ^ 48);
        ch = getchar();
    }
    return x * f;
}

void solve()
{
    int n, m, Q;
    n = read();
    m = read();
    Q = read();
    vector e(n + 1, vector<int>()), f(n + 1, vector<int>());
    vector<int> a(n + 1), deg(n + 1, 0), vis(n + 1, 0), val(n + 1, 0);
    for (int i = 1; i <= m; i++)
    {
        int u, v;
        u = read();
        v = read();
        e[u].push_back(v);
        e[v].push_back(u);
        deg[u]++;
        deg[v]++;
    }
    for (int i = 1; i <= n; i++)
    {
        a[i] = read();
    }
    queue<int> q;
    for (int i = 1; i <= n; i++)
    {
        if (deg[i] <= 10)
        {
            q.push(i);
        }
    }
    while (!q.empty())
    {
        int u = q.front();
        q.pop();
        vis[u] = 1;
        for (auto v : e[u])
        {
            if (vis[v] == 1)
            {
                continue;
            }
            f[u].push_back(v);
            val[v] += a[u];
            deg[v]--;
            if (deg[v] == 10)
            {
                q.push(v);
            }
        }
    }
    while (Q--)
    {
        int op;
        op = read();
        if (op == 1)
        {
            int x, v;
            x = read();
            v = read();
            a[x] += v;
            for (auto y : f[x])
            {
                val[y] += v;
            }
        }
        else
        {
            int x;
            x = read();
            int ans = val[x];
            for (auto y : f[x])
            {
                ans += a[y];
            }
            cout << ans << '\n';
        }
    }
}

signed main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int T = 1;
    // cin >> T;
    while (T--)
    {
        solve();
    }

    return 0;
}
