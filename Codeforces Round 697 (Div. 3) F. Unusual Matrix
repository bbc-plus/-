#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using u64 = unsigned long long;

struct TwoSat
{
    int n;
    vector<vector<int>> e;
    vector<bool> ans;
    TwoSat(int n) : n(n), e(2 * n), ans(n) {}
    void add(int u, bool f, int v, bool g)
    {
        e[2 * u + f].push_back(2 * v + g);
        e[2 * v + g].push_back(2 * u + f);
    }
    bool work()
    {
        vector<int> id(2 * n, -1), dfn(2 * n, -1), low(2 * n, -1);
        vector<int> stk;
        int now = 0, cnt = 0;
        auto tarjan = [&](auto self, int u) -> void
        {
            stk.push_back(u);
            dfn[u] = low[u] = ++now;
            for (auto v : e[u])
            {
                if (dfn[v] == -1)
                {
                    self(self, v);
                    low[u] = min(low[u], low[v]);
                }
                else if (id[v] == -1)
                {
                    low[u] = min(low[u], dfn[v]);
                }
            }
            if (dfn[u] == low[u])
            {
                int v;
                do
                {
                    v = stk.back();
                    stk.pop_back();
                    id[v] = cnt;
                } while (v != u);
                ++cnt;
            }
        };
        for (int i = 0; i < 2 * n; ++i)
        {
            if (dfn[i] == -1)
            {
                tarjan(tarjan, i);
            }
        }
        for (int i = 0; i < n; ++i)
        {
            if (id[2 * i] == id[2 * i + 1])
                return false;
            ans[i] = id[2 * i] > id[2 * i + 1];
        }
        return true;
    }
    vector<bool> answer()
    {
        return ans;
    }
};

void solve()
{
    int n;
    cin >> n;
    TwoSat _2sat(2 * n);
    vector<vector<char>> a(n, vector<char>(n)), b(n, vector<char>(n));
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            cin >> a[i][j];
        }
    }
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            cin >> b[i][j];
            if ((a[i][j] & 1) ^ (b[i][j] & 1))
            {
                _2sat.add(i, 1, j + n, 0);
                _2sat.add(i, 0, j + n, 1);
            }
            else
            {
                _2sat.add(i, 0, j + n, 0);
                _2sat.add(i, 1, j + n, 1);
            }
        }
    }
    if (_2sat.work() == true)
    {
        cout << "YES\n";
    }
    else
    {
        cout << "NO\n";
    }
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int T = 1;
    cin >> T;
    while (T--)
    {
        solve();
    }

    return 0;
}
