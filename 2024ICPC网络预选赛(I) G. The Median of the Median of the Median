#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using u64 = unsigned long long;

void solve()
{
    int n;
    cin >> n;
    vector<int> a(n + 1, 0), b(n + 1, 0), c(n + 1, 0), p(n + 1, 0);
    vector<vector<int>> d(n + 1, vector<int>(n + 1, 0)), p2(n + 1, vector<int>(n + 1, 0));
    for (int i = 1; i <= n; i++)
    {
        cin >> a[i];
        b[i] = a[i];
    }
    sort(b.begin() + 1, b.end());
    auto check = [&](int x) -> bool
    {
        for (int i = 1; i <= n; i++)
        {
            if (a[i] >= x)
                c[i] = 1;
            else
                c[i] = -1;
        }
        for (int i = 1; i <= n; i++)
        {
            p[i] = p[i - 1] + c[i];
        }
        for (int l = 1; l <= n; l++)
        {
            for (int r = l; r <= n; r++)
            {
                d[l][r] = (p[r] - p[l - 1] > 0) ? 1 : -1;
            }
        }
        for (int l = 1; l <= n; l++)
        {
            for (int r = l; r <= n; r++)
            {
                if (r == l)
                    p2[l][r] = p2[l - 1][r] + d[l][r];
                else
                    p2[l][r] = p2[l - 1][r] + p2[l][r - 1] - p2[l - 1][r - 1] + d[l][r];
            }
        }
        int sum = 0;
        for (int l = 1; l <= n; l++)
        {
            for (int r = l; r <= n; r++)
            {
                sum += (p2[r][r] - p2[l - 1][r] > 0) ? 1 : -1;
            }
        }
        if (sum > 0)
            return 1;
        else
            return 0;
    };
    int l = 1, r = n;
    while (l < r)
    {
        int mid = (l + r + 1) >> 1;
        if (check(b[mid]))
        {
            l = mid;
        }
        else
        {
            r = mid - 1;
        }
    }
    cout << b[l] << '\n';
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    solve();

    return 0;
}