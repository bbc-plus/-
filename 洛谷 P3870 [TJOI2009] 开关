#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

template <typename T>
class SegTreeLazyRangeSet
{
    vector<T> tree, lazy;
    vector<T> *arr;
    int n, root, n4, end;

    void modify(int cl, int cr, int p) // 翻转该结点对应区间所有灯的状态
    {
        tree[p] = cr - cl + 1 - tree[p]; // 把该区间的灯状态翻转，相当于：当前开着的灯的数量=灯的总数-上一状态下开着的灯的数量
        lazy[p] ^= 1;                    // 更新懒标记
    }

    void maintain(int cl, int cr, int p) // 懒标记下传
    {
        int cm = cl + (cr - cl) / 2;
        if (cl != cr && lazy[p])
        {
            modify(cl, cm, p << 1);         // 下传懒标记给左孩子
            modify(cm + 1, cr, p << 1 | 1); // 下传懒标记给右孩子
            lazy[p] = 0;                    // 清空该结点懒标记
        }
    }

    T range_sum(int l, int r, int cl, int cr, int p)
    {
        if (l <= cl && cr <= r)
            return tree[p];
        int m = cl + (cr - cl) / 2;
        T sum = 0;
        maintain(cl, cr, p);
        if (l <= m)
            sum += range_sum(l, r, cl, m, p * 2);
        if (r > m)
            sum += range_sum(l, r, m + 1, cr, p * 2 + 1);
        return sum;
    }

    void range_set(int l, int r, T val, int cl, int cr, int p)
    {
        if (l <= cl && cr <= r)
        {
            modify(cl, cr, p);
            return;
        }
        int m = cl + (cr - cl) / 2;
        maintain(cl, cr, p);
        if (l <= m)
            range_set(l, r, val, cl, m, p * 2);
        if (r > m)
            range_set(l, r, val, m + 1, cr, p * 2 + 1);
        tree[p] = tree[p * 2] + tree[p * 2 + 1];
    }

    void build(int s, int t, int p)
    {
        if (s == t)
        {
            tree[p] = (*arr)[s];
            return;
        }
        int m = s + (t - s) / 2;
        build(s, m, p * 2);
        build(m + 1, t, p * 2 + 1);
        tree[p] = tree[p * 2] + tree[p * 2 + 1];
    }

public:
    explicit SegTreeLazyRangeSet<T>(vector<T> v)
    {
        n = v.size();
        n4 = n * 4;
        tree = vector<T>(n4, 0);
        lazy = vector<T>(n4, 0);
        arr = &v;
        end = n - 1;
        root = 1;
        build(0, end, 1);
        arr = nullptr;
    }

    T range_sum(int l, int r) { return range_sum(l, r, 0, end, root); }

    void range_set(int l, int r, int val) { range_set(l, r, val, 0, end, root); }
};

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int n, m;
    cin >> n >> m;
    vector<int> a(n, 0);
    SegTreeLazyRangeSet<int> Stree(a);
    while (m--)
    {
        int c, a, b;
        cin >> c >> a >> b;
        // 线段树内的下标是从0到n-1，所以需要a--，b--来对应
        a--;
        b--;
        if (c == 0)
            Stree.range_set(a, b, 0);
        else
            cout << Stree.range_sum(a, b) << '\n';
    }

    return 0;
}
