#include <bits/stdc++.h>
using namespace std;
#define max_Heap(x) priority_queue<x, vector<x>, less<x>>
#define min_Heap(x) priority_queue<x, vector<x>, greater<x>>
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> PII;
typedef pair<long long, long long> PLL;
const double PI = acos(-1);

#define mod 998244353
struct Mat
{
    int m[151][151];
};
Mat a, e; // 读入矩阵和单位矩阵
ll n, p;
Mat Mul(Mat x, Mat y) // 矩阵乘
{
    Mat c;
    for (int i = 1; i <= n; i++)
        for (int j = 1; j <= n; j++)
            c.m[i][j] = 0;
    for (int i = 1; i <= n; i++)
        for (int j = 1; j <= n; j++)
            for (int k = 1; k <= n; k++)
            {
                c.m[i][j] = 1LL * c.m[i][j] % mod + 1LL * x.m[i][k] * y.m[k][j] % mod;
            }
    return c;
}
Mat Add(Mat x, Mat y) // 矩阵加
{
    for (int i = 1; i <= n; i++)
    {
        for (int j = 1; j <= n; j++)
        {
            x.m[i][j] = (1LL * x.m[i][j] + y.m[i][j]) % mod;
        }
    }
    return x;
}
// Mat Mat_Q_Pow(Mat x, ll y)
// {
//     Mat ans = e;
//     while (y)
//     {
//         if (y & 1)
//         {
//             ans = Mul(ans, x);
//         }
//         x = Mul(x, x);
//         y >>= 1;
//     }
//     return ans;
// }
Mat A;               // 递归过程中维护的Ai
Mat fuc(Mat x, ll k) // 二分递归求解
{
    Mat tmp, y;
    if (k == 1)
        return x;
    tmp = fuc(x, k / 2); // 递归
    if (k & 1)
    {
        // y = Mat_Q_Pow(x, k / 2 + 1);
        y = Mul(A, x);
        A = Mul(x, Mul(A, A));
        tmp = Add(Mul(y, tmp), tmp);
        return Add(tmp, y);
    }
    else
    {
        // y = Mat_Q_Pow(x, k / 2);
        y = A;
        A = Mul(A, A);
        return Add(Mul(y, tmp), tmp);
    }
}
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cin >> n >> p;
    for (int i = 1; i <= n; i++)
    {
        for (int j = 1; j <= n; j++)
        {
            cin >> a.m[i][j];
            A.m[i][j] = a.m[i][j];
        }
    }
    for (int i = 1; i <= n; i++) // 初始化单位矩阵
    {
        e.m[i][i] = 1;
    }
    Mat ans = fuc(a, p);
    for (int i = 1; i <= n; i++)
    {
        for (int j = 1; j <= n; j++)
        {
            if (j != n)
                cout << (ans.m[i][j] + mod) % mod << " ";
            else
                cout << (ans.m[i][j] + mod) % mod << "\n";
        }
    }
    return 0;
}
