#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using u64 = unsigned long long;

const int MAX = 1e6;
vector<pair<int, i64>> e[MAX];
int cant[MAX];
bool has[MAX];

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int n;
    cin >> n;
    int u;
    i64 v;

    for (int i = 1; i <= n; i++)
    {
        cin >> u >> v;
        e[u].push_back({i, v});
        e[i].push_back({u, v});
    }
    vector<i64> f1(n + 1, 0);
    vector<i64> f2(n + 1, 0);

    vector<int> dfn(n + 1, 0);
    vector<int> pre(n + 1, 0);

    vector<i64> tt2(n + 1, 0);
    i64 put = 0;

    for (int st = 1; st <= n; st++)
    {
        i64 tmpans = 0;
        auto dfs1 = [&](auto self, int u, int fa) -> i64
        {
            has[u] = 1;
            for (int j = 0; j < e[u].size(); j++)
            {
                int v = e[u][j].first;
                if (cant[v] == 1)
                    continue;
                if (v == fa)
                    continue;
                i64 res = self(self, v, u) + e[u][j].second;
                f2[u] = max(f2[u], res);
                if (f1[u] < f2[u])
                    swap(f1[u], f2[u]);
            }
            tmpans = max(tmpans, f1[u] + f2[u]);
            return f1[u];
        };

        if (has[st] == 1)
            continue;
        int id = 0;
        vector<int> loop;
        vector<i64> qiao;
        auto dfs_1 = [&](auto self, int u)
        {
            dfn[u] = ++id;
            for (int i = 0; i < e[u].size(); i++)
            {
                int j = e[u][i].first;
                if (j == pre[u])
                    continue;
                if (dfn[j])
                {
                    if (dfn[j] < dfn[u])
                        continue;
                    loop.push_back(j);
                    for (; j != u; j = pre[j])
                    {
                        loop.push_back(pre[j]);
                        qiao.push_back(tt2[j]);
                    }
                    qiao.push_back(e[u][i].second);
                    return;
                }
                else
                {
                    pre[j] = u;
                    tt2[j] = e[u][i].second;
                    self(self, j);
                }
            }
            return;
        };

        dfs_1(dfs_1, st);
        for (int i = 0; i < loop.size(); i++)
        {
            cant[loop[i]] = 1;
        }
        for (int i = 0; i < loop.size(); i++)
        {
            dfs1(dfs1, loop[i], -1);
        }

        vector<i64> val;
        vector<i64> loopid;
        val.push_back(0);
        loopid.push_back(0);
        for (int j = 0; j < 2; j++)
        {
            for (int i = 0; i < loop.size(); i++)
            {
                val.push_back(f1[loop[i]]);
                loopid.push_back(loop[i]);
            }
        }
        int len = loop.size();
        vector<i64> dis(loop.size() * 2 + 1, 0);
        for (int i = 2; i <= loop.size() * 2; i++)
        {
            dis[i] = dis[i - 1] + qiao[(i - 2) % len];
        }

        deque<i64> q;
        for (int i = 1; i <= len * 2; i++)
        {
            while (!q.empty() && q.front() <= i - len)
            {
                q.pop_front();
            }
            if (!q.empty())
            {
                tmpans = max(tmpans, val[i] + val[q.front()] + dis[i] - dis[q.front()]);
            }
            while (!q.empty() && val[q.back()] - dis[q.back()] <= val[i] - dis[i])
            {
                q.pop_back();
            }
            q.push_back(i);
        }

        put += tmpans;
    }
    cout << put << '\n';

    return 0;
}
