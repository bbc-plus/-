#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using u64 = unsigned long long;

void solve()
{
    int n;
    cin >> n;
    vector<int> a(n + 1);
    map<int, int> id1, id2;
    for (int i = 1; i <= n; i++)
    {
        cin >> a[i];
        id1[i - a[i]] = 0;
        id2[i + a[i]] = 0;
    }
    int idx = 0;
    for (auto &[x, y] : id1)
    {
        y = ++idx;
    }
    for (auto &[x, y] : id2)
    {
        y = ++idx;
    }
    vector<vector<array<int, 2>>> e(idx + 1);
    vector<int> match(n + 1, -1);
    vector<bool> vis(idx + 1, 0);
    vector<int> dep(idx + 1, 0);
    for (int i = 1; i <= n; i++)
    {
        int idl = id1[i - a[i]];
        int idr = id2[i + a[i]];
        e[idl].push_back({idr, i});
        e[idr].push_back({idl, i});
    }
    for (int k = 1; k <= idx; k++)
    {
        if (vis[k] == 1)
            continue;
        auto dfs = [&](auto self, int u) -> int
        {
            int last = -1;
            vis[u] = 1;
            for (auto [v, i] : e[u])
            {
                if (vis[v] == 1)
                {
                    if (dep[v] > dep[u])
                    {
                        if (last != -1)
                        {
                            match[last] = i;
                            match[i] = last;
                            last = -1;
                        }
                        else
                        {
                            last = i;
                        }
                    }
                }
                else
                {
                    dep[v] = dep[u] + 1;
                    int res = self(self, v);
                    if (res != -1)
                    {
                        match[res] = i;
                        match[i] = res;
                    }
                    else
                    {
                        if (last != -1)
                        {
                            match[last] = i;
                            match[i] = last;
                            last = -1;
                        }
                        else
                        {
                            last = i;
                        }
                    }
                }
            }
            return last;
        };
        int ret = dfs(dfs, k);
        if (ret != -1)
        {
            cout << "No\n";
            return;
        }
    }
    cout << "Yes\n";
    for (int i = 1; i <= n; i++)
    {
        if (match[i] > i)
        {
            cout << i << ' ' << match[i] << '\n';
        }
    }
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int T = 1;
    cin >> T;
    while (T--)
    {
        solve();
    }

    return 0;
}
