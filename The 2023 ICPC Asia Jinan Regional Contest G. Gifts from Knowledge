#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using u64 = unsigned long long;

struct TwoSat
{
    int n;
    vector<vector<int>> e;
    vector<bool> ans;
    TwoSat(int n) : n(n), e(2 * n), ans(n) {}
    void add(int u, bool f, int v, bool g)
    {
        e[2 * u + f].push_back(2 * v + g);
        e[2 * v + g].push_back(2 * u + f);
    }
    bool work()
    {
        vector<int> id(2 * n, -1), dfn(2 * n, -1), low(2 * n, -1);
        vector<int> stk;
        int now = 0, cnt = 0;
        auto tarjan = [&](auto self, int u) -> void
        {
            stk.push_back(u);
            dfn[u] = low[u] = now++;
            for (auto v : e[u])
            {
                if (dfn[v] == -1)
                {
                    self(self, v);
                    low[u] = min(low[u], low[v]);
                }
                else if (id[v] == -1)
                {
                    low[u] = min(low[u], dfn[v]);
                }
            }
            if (dfn[u] == low[u])
            {
                int v;
                do
                {
                    v = stk.back();
                    stk.pop_back();
                    id[v] = cnt;
                } while (v != u);
                ++cnt;
            }
        };
        for (int i = 0; i < 2 * n; ++i)
        {
            if (dfn[i] == -1)
            {
                tarjan(tarjan, i);
            }
        }
        for (int i = 0; i < n; ++i)
        {
            if (id[2 * i] == id[2 * i + 1])
                return false;
            ans[i] = id[2 * i] > id[2 * i + 1];
        }
        return true;
    }
    vector<bool> answer()
    {
        return ans;
    }
};

struct DSU
{
    std::vector<int> f;
    DSU() {}
    DSU(int n)
    {
        init(n);
    }
    void init(int n)
    {
        f.resize(n + 1);
        std::iota(f.begin(), f.end(), 0);
    }
    int find(int x)
    {
        while (x != f[x])
        {
            x = f[x] = f[f[x]];
        }
        return x;
    }
    bool merge(int x, int y)
    {
        x = find(x);
        y = find(y);
        if (x == y)
            return false;
        f[y] = x;
        return true;
    }
};

void solve()
{
    int r, c;
    cin >> r >> c;
    vector<string> b(r + 1);
    vector<int> cnt(c + 1);
    for (int i = 1; i <= r; i++)
    {
        cin >> b[i];
        b[i] = ' ' + b[i];
        for (int j = 1; j <= c; j++)
        {
            if (b[i][j] == '1')
            {
                cnt[j]++;
            }
        }
    }
    bool ok = 1;
    for (int j = 1; j <= c / 2; j++)
    {
        if (cnt[j] + cnt[c + 1 - j] >= 3)
            ok = 0;
    }
    if (c & 1)
    {
        if (cnt[c / 2 + 1] >= 2)
            ok = 0;
    }
    if (ok == 0)
    {
        cout << 0 << '\n';
        return;
    }
    vector<int> idx(c + 1, 0);
    TwoSat _2sat(r);
    DSU dsu(r);
    int ans = r;
    for (int i = 1; i <= r; i++)
    {
        for (int j = 1; j <= c; j++)
        {
            int x = (b[i][j] == '1') ? 1 : 0;
            if (x == 1)
            {
                if (idx[j] != 0)
                {
                    if (dsu.find(idx[j]) != dsu.find(i))
                    {
                        ans--;
                        dsu.merge(idx[j], i);
                    }
                    _2sat.add(idx[j] - 1, 1, i - 1, 0);
                    _2sat.add(idx[j] - 1, 0, i - 1, 1);
                }
                if (idx[c + 1 - j] != 0)
                {
                    if (dsu.find(idx[c + 1 - j]) != dsu.find(i))
                    {
                        ans--;
                        dsu.merge(idx[c + 1 - j], i);
                    }
                    _2sat.add(idx[c + 1 - j] - 1, 0, i - 1, 0);
                    _2sat.add(idx[c + 1 - j] - 1, 1, i - 1, 1);
                }
            }
        }
        for (int j = 1; j <= c; j++)
        {
            int x = (b[i][j] == '1') ? 1 : 0;
            if (x == 1)
            {
                idx[j] = i;
            }
        }
    }
    if (_2sat.work() == true)
    {
        const int mod = 1e9 + 7;
        i64 out = 1;
        for (int i = 1; i <= ans; i++)
        {
            out *= 2;
            out %= mod;
        }
        cout << out << '\n';
    }
    else
    {
        cout << 0 << '\n';
    }
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int t = 1;
    cin >> t;
    while (t--)
    {
        solve();
    }

    return 0;
}
