#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using u64 = unsigned long long;

void solve()
{
    int n;
    cin >> n;
    vector<vector<int>> e(n + 1);
    for (int i = 1; i < n; i++)
    {
        int u, v;
        cin >> u >> v;
        e[u].push_back(v);
        e[v].push_back(u);
    }
    vector<int> ord(n + 1, n);
    vector<int> input;
    input.push_back(0);
    int x;
    int idx = 0;
    while (cin >> x)
    {
        input.push_back(x);
        ++idx;
        ord[x] = idx;
    }
    vector<int> num(n + 1, 0);
    auto fuc = [&](auto self, int u, int fa) -> int
    {
        int minn = ord[u];
        for (auto v : e[u])
        {
            if (v == fa)
                continue;
            minn = min(minn, self(self, v, u));
        }
        ord[u] = minn;
        return minn;
    };
    fuc(fuc, 1, 0);
    for (int i = 1; i <= n; i++)
    {
        sort(e[i].begin(), e[i].end(), [&](int a, int b)
             { return ord[a] < ord[b]; });
    }
    idx = 0;
    vector<int> ans;
    ans.push_back(1);
    auto dfs = [&](auto self, int u, int fa) -> void
    {
        if (u != 1 && e[u].size() == 1)
        {
            ++idx;
            num[u] = idx;
        }
        for (auto v : e[u])
        {
            if (v == fa)
                continue;
            ans.push_back(v);
            self(self, v, u);
            ans.push_back(u);
        }
    };
    dfs(dfs, 1, 0);
    for (int i = 1; i < input.size(); i++)
    {
        if (num[input[i]] != i)
        {
            cout << -1 << '\n';
            return;
        }
    }
    for (int i = 0; i < ans.size(); i++)
    {
        cout << ans[i] << " \n"[i == ans.size() - 1];
    }
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int T = 1;
    // cin >> T;
    while (T--)
    {
        solve();
    }

    return 0;
}
