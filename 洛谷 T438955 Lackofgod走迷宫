#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
// 因为组合数的分母最大取到n+m-2，所以N要开到2e6
const int N = 2e6 + 6;
const int MOD = 1e9 + 7;
int fact[N], invf[N];
// 快速幂
int qpow(int a, int b, int p)
{
    int res = 1;
    while (b)
    {
        if (b & 1)
            res = (1ll * res * a) % p;
        a = (1ll * a * a) % p;
        b /= 2;
    }
    return res % p;
}
// 对组合数进行初始化
void init(int n)
{
    fact[0] = 1;
    for (int i = 1; i <= n; i++)
        fact[i] = (1ll * fact[i - 1] * i) % MOD;
    invf[n] = qpow(fact[n], MOD - 2, MOD);
    for (int i = n - 1; i >= 0; i--)
        invf[i] = (1ll * invf[i + 1] * (i + 1)) % MOD;
}
// 求组合数，其中用到乘法逆元
int C(int a, int b, int p)
{
    return (ll)fact[a] * invf[b] % p * invf[a - b] % p;
}
// 结构体存储障碍物坐标
struct node
{
    int x, y;
};
// 障碍物按纵坐标排序，纵坐标相同按横坐标排序
bool cmp(node a, node b)
{
    if (a.x == b.x)
    {
        return a.y < b.y;
    }
    else
    {
        return a.x < b.x;
    }
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    // 初始化组合数的函数调用，勿忘
    init(2e6 + 5);

    int n, m, k;
    cin >> n >> m >> k;
    // 障碍物数组
    vector<node> obstacle(k);
    for (int i = 0; i < k; i++)
    {
        cin >> obstacle[i].x >> obstacle[i].y;
    }
    // 排序
    sort(obstacle.begin(), obstacle.end(), cmp);
    // dp数组
    ll dp[26] = {0};
    // 求dpi
    for (int i = 0; i < k; i++)
    {
        int xi = obstacle[i].x;
        int yi = obstacle[i].y;
        // 不考虑前面障碍物到达该障碍物的方案数
        dp[i] = C(xi - 1 + yi - 1, xi - 1, MOD);
        // 减去经过前面障碍物到达该障碍物的方案数
        for (int j = 0; j < i; j++)
        {
            int xj = obstacle[j].x;
            int yj = obstacle[j].y;
            // 如果yi小于yj，说明第j个障碍物不在第i个障碍物前面，需要continue
            if (yi < yj)
                continue;
            dp[i] = (dp[i] - (ll)dp[j] * C(xi - xj + yi - yj, xi - xj, MOD) % MOD) % MOD;
        }
    }
    // 不考虑障碍物到达终点的方案数
    ll ans = C(n - 1 + m - 1, n - 1, MOD);
    // 减去经过障碍物到达终点的方案数
    for (int i = 0; i < k; i++)
    {
        int xi = obstacle[i].x;
        int yi = obstacle[i].y;
        ans = (ans - (ll)dp[i] * C(n - xi + m - yi, n - xi, MOD) % MOD) % MOD;
    }
    // 特判取模相减后ans<0的情况
    if (ans < 0)
        ans += MOD;

    cout << ans;

    return 0;
}
