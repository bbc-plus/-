#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using u64 = unsigned long long;

struct HLD
{
    vector<vector<int>> e;
    vector<int> siz, son, cnt;
    vector<i64> ans, color;
    i64 sum, Max;
    int hson;
    HLD(int n)
    {
        color.resize(n + 1, 0);
        e.resize(n + 1);
        siz.resize(n + 1);
        son.resize(n + 1);
        ans.resize(n + 1);
        cnt.resize(n + 1);
        hson = 0;
        sum = 0;
        Max = 0;
    }
    void add(int u, int v)
    {
        e[u].push_back(v);
        e[v].push_back(u);
    }
    void dfs1(int u, int fa)
    {
        siz[u] = 1;
        for (auto v : e[u])
        {
            if (v == fa)
                continue;
            dfs1(v, u);
            siz[u] += siz[v];
            if (siz[v] > siz[son[u]])
                son[u] = v;
        }
    }
    void calc(int u, int fa, int val)
    {
        cnt[color[u]] += val;
        if (cnt[color[u]] > Max)
        {
            Max = cnt[color[u]];
            sum = color[u];
        }
        else if (cnt[color[u]] == Max)
        {
            sum += color[u];
        }
        for (auto v : e[u])
        {
            if (v == fa || v == hson)
                continue;
            calc(v, u, val);
        }
    }
    void dfs2(int u, int fa, int opt)
    {
        for (auto v : e[u])
        {
            if (v == fa || v == son[u])
                continue;
            dfs2(v, u, 0);
        }
        if (son[u])
        {
            dfs2(son[u], u, 1);
            hson = son[u];
        }
        calc(u, fa, 1);
        hson = 0;
        ans[u] = sum;
        if (!opt)
        {
            calc(u, fa, -1);
            sum = 0;
            Max = 0;
        }
    }
};

void solve()
{
    int n;
    cin >> n;
    HLD hld(n);
    for (int i = 1; i <= n; i++)
    {
        cin >> hld.color[i];
    }
    for (int i = 1; i < n; i++)
    {
        int x, y;
        cin >> x >> y;
        hld.add(x, y);
    }
    hld.dfs1(1, 0);
    hld.dfs2(1, 0, 0);
    for (int i = 1; i <= n; i++)
    {
        cout << hld.ans[i] << " \n"[i == n];
    }
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int T = 1;
    // cin >> T;
    while (T--)
    {
        solve();
    }

    return 0;
}
