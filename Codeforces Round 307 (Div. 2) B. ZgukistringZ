#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using u64 = unsigned long long;

void solve()
{
    string a, b, c;
    cin >> a >> b >> c;
    int ans1 = 0, ans2 = 0, tot = 0;
    vector<int> cnt1(26, 0), cnt2(26, 0), cnt3(26, 0);
    auto cal = [&](string s, vector<int> &cnt) -> void
    {
        for (int i = 0; i < s.size(); i++)
        {
            cnt[s[i] - 'a']++;
        }
    };
    cal(a, cnt1);
    cal(b, cnt2);
    cal(c, cnt3);
    int num1 = 1e9, num2 = 1e9;
    for (int i = 0; i < 26; i++)
    {
        if (cnt2[i])
            num1 = min(num1, cnt1[i] / cnt2[i]);
        if (cnt3[i])
            num2 = min(num2, cnt1[i] / cnt3[i]);
    }
    auto fuc = [&](int num, vector<int> &c1, vector<int> &c2) -> void
    {
        for (int n1 = 1; n1 <= num; n1++)
        {
            auto tmp = cnt1;
            int n2 = 1e9;
            for (int i = 0; i < 26; i++)
            {
                tmp[i] -= n1 * c1[i];
                if (c2[i])
                    n2 = min(n2, tmp[i] / c2[i]);
            }
            if (n1 + n2 > tot)
            {
                tot = n1 + n2;
                ans1 = n1, ans2 = n2;
            }
        }
        for (int i = 0; i < 26; i++)
        {
            if (c1[i])
                cnt1[i] -= ans1 * c1[i];
            if (c2[i])
                cnt1[i] -= ans2 * c2[i];
        }
    };
    auto output = [&](int t1, int t2) -> void
    {
        for (int i = 1; i <= t1; i++)
        {
            cout << b;
        }
        for (int i = 1; i <= t2; i++)
        {
            cout << c;
        }
    };
    if (num1 >= num2)
    {
        fuc(num1, cnt2, cnt3);
        output(ans1, ans2);
    }
    else
    {
        fuc(num2, cnt3, cnt2);
        output(ans2, ans1);
    }
    for (int i = 0; i < 26; i++)
    {
        for (int j = 0; j < cnt1[i]; j++)
        {
            cout << char(i + 'a');
        }
    }
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int T = 1;
    // cin >> T;
    while (T--)
    {
        solve();
    }

    return 0;
}
