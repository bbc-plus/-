#include <bits/stdc++.h>
using namespace std;
#define int long long
using i64 = long long;
using u64 = unsigned long long;

void solve()
{
    i64 n;
    cin >> n;
    const int mod = 1e9 + 7;
    struct Matrix
    {
        int m[3][3];
        Matrix()
        {
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    m[i][j] = 0;
                }
            }
        }
    };
    auto mul = [&](Matrix a, Matrix b) -> Matrix
    {
        Matrix res;
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                for (int k = 0; k < 3; k++)
                {
                    res.m[i][j] += a.m[i][k] * b.m[k][j];
                    res.m[i][j] %= mod;
                }
            }
        }
        return res;
    };
    auto qpow = [&](Matrix a, int b) -> Matrix
    {
        Matrix res;
        for (int i = 0; i < 3; i++)
        {
            res.m[i][i] = 1;
        }
        while (b)
        {
            if (b & 1)
            {
                res = mul(res, a);
            }
            a = mul(a, a);
            b >>= 1;
        }
        return res;
    };
    if (n <= 3)
    {
        cout << 1 << '\n';
    }
    else
    {
        Matrix A;
        A.m[0][0] = A.m[0][1] = A.m[2][0] = A.m[1][2] = 1;
        Matrix mt = qpow(A, n - 3);
        i64 ans = 0;
        for (int i = 0; i < 3; i++)
        {
            ans += mt.m[i][0];
            ans %= mod;
        }
        cout << ans << '\n';
    }
}

signed main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int T = 1;
    cin >> T;
    while (T--)
    {
        solve();
    }

    return 0;
}
