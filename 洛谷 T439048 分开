#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    ll p[66] = {0};
    ll cnt[66] = {0};
    int n;
    cin >> n;

    ll x;

    for (int i = 0; i < n; i++)
    {
        cin >> x;
        // 统计每位的出现次数
        for (int j = 61; j >= 0; j--)
        {
            if (x >> j & 1)
            {
                cnt[j]++;
            }
        }
        // 插入线性基
        for (int j = 61; j >= 0; j--)
        {
            if (x == 0)
                break;
            if (x >> j & 1)
            {
                if (p[j] == 0)
                {
                    p[j] = x;
                    break;
                }
                else
                {
                    x = x ^ p[j];
                }
            }
        }
    }
    // 保存异或结果较大集合的异或和
    ll res = 0;
    // 求线性基表示的最大值
    for (int i = 61; i >= 0; i--)
    {
        if (p[i] != 0)
        {
            if ((res ^ p[i]) > res)
            {
                res = res ^ p[i];
            }
        }
    }
    ll tmp = 0;
    // 如果该位出现奇数次，则一定是一个集合出现奇数次（贡献），另一个集合出现偶数次（不贡献）
    // 如果该位出现偶数次，则可能是奇+奇，也可能是偶＋偶
    for (int j = 61; j >= 0; j--)
    {
        if (cnt[j] > 0)
        {
            if (cnt[j] % 2 == 1)
            {
                if (!(res >> j & 1))
                {
                    tmp += 1 << j;
                }
            }
            else
            {
                if (res >> j & 1)
                {
                    tmp += 1 << j;
                }
            }
        }
    }
    // 加上另一个集合的异或和
    res += tmp;
    // 输出结果
    cout << res << '\n';

    return 0;
}
