#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using u64 = unsigned long long;

const int MAX = 1e6 + 6;
vector<int> fac[MAX];
int isnt_prime[MAX], w[MAX], mul[MAX];

int qry(int x, int y)
{
    return w[x] - w[__gcd(x, y)] + w[y];
}

void solve()
{
    int l, r;
    cin >> l >> r;
    int _prime = -1;
    for (int i = l; i <= r; i++)
    {
        if (!isnt_prime[i])
        {
            _prime = i;
            break;
        }
    }
    if (_prime == -1)
    {
        int ans2 = 0;
        vector<vector<pair<int, int>>> e(r - l + 1);
        for (int i = l; i <= r; i++)
        {
            for (int j = i + 1; j <= r; j++)
            {
                int val = qry(i, j);
                e[i - l].push_back({val, j - l});
                e[j - l].push_back({val, i - l});
            }
        }
        int _siz = r - l + 1;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        ans2 = 0;
        vector<int> dis(_siz, 0), exist(_siz, 0);
        int st = 0;
        for (int i = 0; i < _siz; i++)
        {
            dis[i] = 1e9;
            exist[i] = 0;
        }
        pq.push({0, st});
        dis[st] = 0;
        int cnt = 0;
        while (!pq.empty() && cnt < _siz)
        {
            int curDis = pq.top().first;
            int u = pq.top().second;
            pq.pop();
            if (exist[u] == 1)
                continue;
            cnt++;
            ans2 += curDis;
            exist[u] = 1;
            for (auto v : e[u])
            {
                if (exist[v.second] == 1)
                    continue;
                if (v.first < dis[v.second])
                {
                    dis[v.second] = v.first;
                    pq.push({v.first, v.second});
                }
            }
        }
        cout << ans2 << '\n';
    }
    else
    {
        i64 ans = 0;
        if (l == 1)
        {
            for (int i = l; i <= r; i++)
            {
                ans += w[i];
            }
            cout << ans << '\n';
            return;
        }
        vector<pair<int, int>> v;
        for (int i = l; i <= r; i++)
        {
            v.push_back({mul[i], w[i]});
        }
        sort(v.begin(), v.end());
        int maxn = v[v.size() - 1].first;
        vector<int> vis(maxn + 1, 0);
        for (int i = 0; i < v.size(); i++)
        {
            int ml = v[i].first;
            int val = v[i].second;
            ans += val;
            if (vis[ml] == 0)
            {
                ans++;
            }
            for (int j = 1; ml * j <= maxn; j++)
            {
                vis[ml * j] = 1;
            }
        }
        cout << ans - 2 << '\n';
    }
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    for (int i = 2; i <= 1e6; i++)
    {
        mul[i] = 1;
    }
    isnt_prime[1] = 1;
    for (int i = 2; i <= 1e6; i++)
    {
        if (!isnt_prime[i])
        {
            w[i]++;
            mul[i] *= i;
            fac[i].push_back(i);
            for (int j = 2; i * j <= 1e6; j++)
            {
                isnt_prime[i * j] = 1;
                w[i * j]++;
                mul[i * j] *= i;
                fac[i * j].push_back(i);
            }
        }
    }

    int T = 1;
    cin >> T;
    while (T--)
    {
        solve();
    }

    return 0;
}
