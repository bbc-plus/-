#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

ll dp[20][20];                                          // dp记录[pos][not_0_cnt]状态下的满足条件的个数
int a[20];                                              // a[]记录数字串
ll dfs(int pos, int not_0_cnt, bool bound, bool lead_0) // pos为此时的位置，not_0_cnt表示不是0的个数，bound表示前面每一位是否都是上界，lead_0表示是否前面全是0
{
    if (pos == 0) // 枚举完每一位时返回
    {
        if (not_0_cnt <= 3)
            return 1;
        else
            return 0;
    }
    if (!bound && dp[pos][not_0_cnt] != -1) // 读取记忆(doge
        return dp[pos][not_0_cnt];
    int max_num; // 可枚举的该位的数的上界
    if (bound)
        max_num = a[pos];
    else
        max_num = 9;
    ll res = 0; // 统计此时的答案
    for (int i = 0; i <= max_num; i++)
    {
        if (lead_0 && i == 0)
            res += dfs(pos - 1, 0, bound && (i == a[pos]), 1);
        else
            res += dfs(pos - 1, not_0_cnt + (i != 0), bound && (i == a[pos]), 0);
    }
    if (!bound && !lead_0) // 没在边界时，记录下该状态对应的答案，记忆化
        dp[pos][not_0_cnt] = res;
    return res;
}
ll solve(ll x)
{
    int len = 0; // 数字长度
    while (x)
    {
        a[++len] = x % 10;
        x /= 10;
    }
    return dfs(len, 0, 1, 1);
}
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    memset(dp, -1, sizeof(dp)); // 将dp数组初始化为-1，表示对应状态的答案目前还未计算出
    int t;
    cin >> t;
    ll l, r;
    while (t--)
    {
        cin >> l >> r;
        cout << solve(r) - solve(l - 1) << '\n';
    }

    return 0;
}
