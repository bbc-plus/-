#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
typedef long long ll;

const int MAX = 2e5 + 6;
int n, m;
struct TREE
{
    vector<int> e[MAX];
    int depth[MAX];
    int fa[MAX][26];
    int dif[MAX];
    void add(int u, int v) // 添加无向边
    {
        e[u].push_back(v);
        e[v].push_back(u);
    }
    void getDepth(int u, int fath) // 获得每个节点的深度及父亲
    {
        fa[u][0] = fath;
        depth[u] = depth[fath] + 1;
        for (auto v : e[u])
        {
            if (v != fath)
                getDepth(v, u);
        }
    }
    void init()
    {
        getDepth(1, 1);
        for (int i = 1; i <= 20; i++)
        {
            for (int j = 1; j <= n; j++)
            {
                fa[j][i] = fa[fa[j][i - 1]][i - 1]; // 记录每个节点的倍增祖先
            }
        }
    }
    int lca(int x, int y)
    {
        if (depth[x] < depth[y])
            swap(x, y);
        // 先将x和y的深度调节成一致的
        for (int i = 20; i >= 0; i--)
        {
            if (depth[fa[x][i]] >= depth[y])
            {
                x = fa[x][i];
            }
        }
        // 再一起向低深度跳跃，从而找到最近公共祖先
        if (x == y)
            return x;
        for (int i = 20; i >= 0; i--)
        {
            if (fa[x][i] != fa[y][i])
            {
                x = fa[x][i];
                y = fa[y][i];
            }
        }
        return fa[x][0];
    }
    void insert(int u, int v) // 树上差分
    {
        dif[u]++;
        dif[v]++;
        dif[lca(u, v)] -= 2;
    }
    void dfs(int u) // 用dfs求出树上差分的前缀和
    {
        for (auto v : e[u])
        {
            if (v != fa[u][0])
            {
                dfs(v);
                dif[u] += dif[v];
            }
        }
    }
} tree;

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    cin >> n >> m;
    int u, v;
    for (int i = 1; i < n; i++)
    {
        cin >> u >> v;
        tree.add(u, v); // 添加主要边
    }
    tree.init();
    for (int i = 1; i <= m; i++)
    {
        cin >> u >> v;
        tree.insert(u, v); // 添加次要边
    }
    tree.dfs(1); // 树上差分求前缀和，从而求出每个节点到其父亲节点(除去直接相连的主要边之外的)的路径个数
    i64 ans = 0;
    for (int i = 2; i <= n; i++)
    {
        if (tree.dif[i] == 0) // 此时删去主要边即可破坏整张图，所以任意选择一条次要边都满足条件，贡献为m
            ans += m;
        if (tree.dif[i] == 1) // 此时删去主要边后必须删去连通两点的唯一次要边，贡献为1
            ans++;
        // 当除去直接相连的主要边之外的路径个数大于1时，删去该主要边和任意一条次要边都无法破坏整张图，贡献为0
    }
    cout << ans << '\n';

    return 0;
}
