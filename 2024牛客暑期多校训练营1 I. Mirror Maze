#include <bits/stdc++.h>
using namespace std;
using i64 = long long;

char g[1006][1006];

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int n, m;
    cin >> n >> m;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            cin >> g[i][j];
    // 判断是否出界
    auto valid = [&](int x, int y)
    {
        return 0 <= x && x < n && 0 <= y && y < m;
    };
    // 编号
    auto above = [&](int x, int y)
    {
        return !valid(x, y) ? -1 : (x * m + y) * 4 + 2;
    };
    auto below = [&](int x, int y)
    {
        return !valid(x, y) ? -1 : (x * m + y) * 4 + 3;
    };
    auto left = [&](int x, int y)
    {
        return !valid(x, y) ? -1 : (x * m + y) * 4 + 0;
    };
    auto right = [&](int x, int y)
    {
        return !valid(x, y) ? -1 : (x * m + y) * 4 + 1;
    };

    int tot_num = n * m * 4;
    vector<int> to(tot_num), w(tot_num, -1);

    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            int t = i * m + j;
            if (g[i][j] == '|')
            {
                to[left(i, j)] = right(i, j - 1), w[left(i, j)] = t;
                to[right(i, j)] = left(i, j + 1), w[right(i, j)] = t;
                to[above(i, j)] = above(i + 1, j);
                to[below(i, j)] = below(i - 1, j);
            }
            else if (g[i][j] == '-')
            {
                to[above(i, j)] = below(i - 1, j), w[above(i, j)] = t;
                to[below(i, j)] = above(i + 1, j), w[below(i, j)] = t;
                to[left(i, j)] = left(i, j + 1);
                to[right(i, j)] = right(i, j - 1);
            }
            else if (g[i][j] == '/')
            {
                to[left(i, j)] = below(i - 1, j), w[left(i, j)] = t;
                to[right(i, j)] = above(i + 1, j), w[right(i, j)] = t;
                to[above(i, j)] = right(i, j - 1), w[above(i, j)] = t;
                to[below(i, j)] = left(i, j + 1), w[below(i, j)] = t;
            }
            else
            {
                to[left(i, j)] = above(i + 1, j), w[left(i, j)] = t;
                to[right(i, j)] = below(i - 1, j), w[right(i, j)] = t;
                to[above(i, j)] = left(i, j + 1), w[above(i, j)] = t;
                to[below(i, j)] = right(i, j - 1), w[below(i, j)] = t;
            }
        }
    }
    vector<int> ans(tot_num), vis(tot_num);
    auto go = [&](int x)
    {
        vector<int> path;
        auto dfs = [&](auto self, int x)
        {
            if (x == -1)
                return;
            vis[x] = 1;
            path.push_back(x);
            self(self, to[x]);
        };
        dfs(dfs, x);
        set<int> st;
        for (int i = path.size() - 1; i >= 0; i--)
        {
            if (w[path[i]] != -1)
                st.insert(w[path[i]]);
            ans[path[i]] = st.size();
        }
    };
    for (int i = 0; i < m; i++)
    {
        go(above(0, i));
        go(below(n - 1, i));
    }
    for (int i = 0; i < n; i++)
    {
        go(left(i, 0));
        go(right(i, m - 1));
    }
    for (int i = 0; i < tot_num; i++)
    {
        if (vis[i])
            continue;
        vector<int> path;
        int x = i;
        set<int> st;
        do
        {
            path.push_back(x);
            if (w[x] != -1)
                st.insert(w[x]);
            x = to[x];
        } while (x != i);
        for (auto j : path)
            ans[j] = st.size(), vis[j] = 1;
    }
    auto getAns = [&](int x)
    {
        if (x == -1)
            return 0;
        return ans[x];
    };
    int q;
    cin >> q;
    while (q--)
    {
        int u, v;
        string dir;
        cin >> u >> v >> dir;
        u--, v--;
        if (dir == "above")
            cout << getAns(below(u - 1, v)) << '\n';
        else if (dir == "below")
            cout << getAns(above(u + 1, v)) << '\n';
        else if (dir == "left")
            cout << getAns(right(u, v - 1)) << '\n';
        else
            cout << getAns(left(u, v + 1)) << '\n';
    }

    return 0;
}
