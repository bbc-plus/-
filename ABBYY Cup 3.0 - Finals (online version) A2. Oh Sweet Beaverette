#include <bits/stdc++.h>
using namespace std;
#define max_Heap(x) priority_queue<x, vector<x>, less<x>>
#define min_Heap(x) priority_queue<x, vector<x>, greater<x>>
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> PII;
typedef pair<long long, long long> PLL;
const double PI = acos(-1);

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    int n;
    cin >> n;
    vector<ll> a(n + 1); // 美观度数组
    for (int i = 1; i <= n; i++)
    {
        cin >> a[i];
    }
    unordered_map<int, int> first; // 记录某个美观度第一次出现的位置
    unordered_map<int, int> last;  // 记录某个美观度最后一次出现的位置
    vector<ll> sum(n + 1, 0);      // 美观度前缀和
    for (int i = 1; i <= n; i++)
    {
        sum[i] = sum[i - 1] + max(a[i], 1ll * 0); // 若美观度为负数，就砍伐，不记录其中
        if (first.count(a[i]) == 0)
            first[a[i]] = i; // 只有当第一次出现时才赋值
        last[a[i]] = i;      // 不断更新最后一次出现的位置
    }
    int l, r;                                                                           // 记录美观度总和最大时的首尾位置
    ll ans = LLONG_MIN;                                                                 // 初始化为最小值
    for (unordered_map<int, int>::iterator it = first.begin(); it != first.end(); it++) // 遍历所有美观度相同的距离最长的树对
    {
        int left = it->second;
        int right = last[it->first];
        if (left == right)
            continue; // 该美观度不存在于两棵及以上的树，跳过
        // cur记录当前美观度总和。由于sum记录的是所有大于0的美观度的前缀和，而首尾的树不能砍掉，所有首尾的美观度计算时应单独加上a[right]和a[left]
        ll cur = sum[right - 1] - sum[left] + a[right] + a[left];
        if (cur > ans)
        {
            ans = cur;
            l = left;
            r = right;
        }
    }
    int cnt = 0;     // 需砍伐的树木数量
    vector<int> pos; // 需砍伐的树木位置
    for (int i = 1; i <= n; i++)
    {
        if (i < l || i > r) // 在区间[l,r]之外，需要砍伐
        {
            cnt++;
            pos.push_back(i);
        }
        else if (i > l && i < r)
        {
            if (a[i] < 0) // 在区间(l,r)中，如果美观度小于0，则需要砍伐
            {
                cnt++;
                pos.push_back(i);
            }
        }
    }
    // 输出结果
    cout << ans << ' ' << cnt << '\n';
    for (int i = 0; i < pos.size(); i++)
    {
        if (i != pos.size() - 1)
            cout << pos[i] << ' ';
        else
            cout << pos[i] << '\n';
    }

    return 0;
}
