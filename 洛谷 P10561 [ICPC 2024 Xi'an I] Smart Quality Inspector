#include <bits/stdc++.h>
using namespace std;
#define int long long
using i64 = long long;
using u64 = unsigned long long;

void solve()
{
    int n, k, m;
    cin >> n >> k >> m;
    vector<vector<int>> num(n + 1, vector<int>(n + 1, 0));
    while (m--)
    {
        int l, r;
        cin >> l >> r;
        num[l][r]++;
    }
    vector<vector<vector<int>>> a(n + 1, vector<vector<int>>(n + 1, vector<int>(n + 1)));
    for (int x = 1; x <= n; x++)
    {
        for (int l = 1; l <= x; l++)
        {
            for (int r = x; r <= n; r++)
            {
                for (int i = l; i <= x; i++)
                {
                    for (int j = x; j <= r; j++)
                    {
                        a[x][l][r] += num[i][j];
                    }
                }
            }
        }
    }
    int up = 1 << n;
    vector<int> f(up, (int)(1e9));
    f[0] = 0;
    for (int i = 0; i < up; i++)
    {
        vector<int> left(n + 1), right(n + 1);
        int cnt = 0;
        for (int j = 0; j < n; j++)
        {
            if ((i >> j) & 1)
            {
                cnt++;
            }
        }
        int l = 0;
        for (int j = 0; j < n; j++)
        {
            if ((i >> j) & 1)
            {
                l = j + 1;
            }
            else
            {
                left[j] = l;
            }
        }
        int r = n - 1;
        for (int j = n - 1; j >= 0; j--)
        {
            if ((i >> j) & 1)
            {
                r = j - 1;
            }
            else
            {
                right[j] = r;
            }
        }
        for (int j = 0; j < n; j++)
        {
            if (!((i >> j) & 1))
            {
                f[i | (1 << j)] = min(f[i | (1 << j)], f[i] + max(k - cnt, 0LL) * a[j + 1][left[j] + 1][right[j] + 1]);
            }
        }
    }
    cout << f[up - 1] << '\n';
}

signed main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int T = 1;
    // cin >> T;
    while (T--)
    {
        solve();
    }

    return 0;
}
