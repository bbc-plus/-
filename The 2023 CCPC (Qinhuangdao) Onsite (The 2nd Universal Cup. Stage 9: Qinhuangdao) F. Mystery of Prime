#include <bits/stdc++.h>
using namespace std;
using i64 = long long;

void solve()
{
    vector<int> prime;
    vector<int> is_prime;
    auto euler_prime = [&](int n) -> void
    {
        vector<int> v(n + 1);
        for (int i = 2; i <= n; i++)
        {
            if (!v[i])
            {
                v[i] = i;
                prime.push_back(i);
            }
            for (int j = 0; j < prime.size(); j++)
            {
                if (prime[j] > v[i] || prime[j] > n / i)
                    break;
                v[i * prime[j]] = prime[j];
            }
        }
    };
    euler_prime(2e5 + 6);
    is_prime.resize(2e5 + 7, 0);
    for (int i = 0; i < prime.size(); i++)
    {
        is_prime[prime[i]] = 1;
    }
    int n;
    cin >> n;
    vector<int> a(n);
    for (int i = 0; i < n; i++)
    {
        cin >> a[i];
    }
    vector<vector<i64>> dp(n, vector<i64>(4, 1e9));
    // 0表示不修改
    // 1表示改为1
    // 2表示改为偶数
    // 3表示改为非1的奇数
    dp[0][0] = 0;
    dp[0][1] = dp[0][2] = dp[0][3] = 1;
    for (int i = 1; i < n; i++)
    {
        auto ok = [&](int pre, int cur) -> bool
        {
            if (pre <= 1 && cur <= 1)
            {
                int sum = 0;
                sum += (pre == 1 ? 1 : a[i - 1]);
                sum += (cur == 1 ? 1 : a[i]);
                if (is_prime[sum])
                    return 1;
                else
                    return 0;
            }
            if (pre == 0)
                return (a[i - 1] & 1) ^ (cur == 3);
            else if (pre == 1)
                return cur == 2;
            else if (cur == 0)
                return (a[i] & 1) ^ (pre == 3);
            else if (cur == 1)
                return pre == 2;
            else
                return (cur == 2) ^ (pre == 2);
        };
        for (int pre = 0; pre < 4; pre++)
        {
            for (int cur = 0; cur < 4; cur++)
            {
                if (!ok(pre, cur))
                    continue;
                dp[i][cur] = min(dp[i][cur], dp[i - 1][pre] + ((cur == 0) ? 0 : 1));
            }
        }
    }
    i64 ans = LLONG_MAX;
    for (int i = 0; i < 4; i++)
    {
        ans = min(ans, dp[n - 1][i]);
    }
    cout << ans << '\n';
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int T = 1;
    // cin >> T;
    while (T--)
    {
        solve();
    }

    return 0;
}
