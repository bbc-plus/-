#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
typedef long long ll;

int n; // 注意题目要求n为奇数，事实上n为偶数是无解的

int normal(int a) // 将值转化为1~n之间的数，使代码更简洁
{
    a--;
    if (a < 0)
        a += n;
    a %= n;
    return a + 1;
}

int query(int a) // 询问当前点到两个隐藏点的最短路长度之和
{
    cout << '?' << ' ' << normal(a) << '\n';
    cout.flush(); // 见题目所给提示
    int res;
    cin >> res;
    return res;
}

int other(int a) // 已知一个隐藏点a的位置，返回另一个隐藏点b的位置
{
    int dis = query(a);              // 先找到两个隐藏点之间的距离
    if (query(normal(a - 1)) == dis) // 然后判断另一个点在逆时针方向还是顺时针方向
        return a - dis;
    else
        return a + dis;
}

void output(int a) // 输出答案
{
    int b = other(normal(a));
    cout << '!' << ' ' << normal(a) << ' ' << normal(b) << '\n';
    cout.flush(); // 见题目所给提示
    return;
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int t;
    cin >> t;
    while (t--)
    {
        cin >> n;
        int q1 = query(1), q2 = query(2); // 先询问1和2两个相邻点
        int dif = q2 - q1;
        switch (dif)
        {
        case 0:
        {
            int l = 1, r = n / 2; // 整个环的一半中一定有询问的值与q1不相同的点
            while (l < r)         // 二分第一个询问值与q1不相同的点，这个点一定是隐藏点或者隐藏点的对称点
            {
                int mid = (l + r + 1) >> 1;
                if (query(mid + 1) == q1)
                    l = mid;
                else
                    r = mid - 1;
            }
            // l+1为二分得到的点
            if (q1 <= n / 2) // 若点1在两个隐藏点为端点的劣弧上，则二分得到的点为隐藏点
                output(l + 1);
            else // 否则二分得到的点为隐藏点的对称点
            {
                int x = l + 1 + (n + 1) / 2; // 再作一下对称即可得到隐藏点
                output(x);
            }
        }
        break;
        // 下面四种情况只需先求出两隐藏点距离dis，然后计算出一个隐藏点位置即可
        case 1:
        {
            int dis = n - q2;
            int x = 1 - (q1 - dis) / 2;
            output(x);
        }
        break;
        case -1:
        {
            int dis = n - q1;
            int x = 2 + (q2 - dis) / 2;
            output(x);
        }
        break;
        case 2:
        {
            int dis = query(2 - q2 / 2);
            int x = 2 - (q2 - dis) / 2;
            output(x);
        }
        break;
        case -2:
        {
            int dis = query(1 + q1 / 2);
            int x = 1 + (q1 - dis) / 2;
            output(x);
        }
        break;
        default:
            cout << "error\n"; // 正常输入输出下不会执行该行代码
            break;
        }
    }

    return 0;
}
