#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using u64 = unsigned long long;

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    // Pull the Box
    // 1.判断一下终点n有没有连着两条及以上的无向边，没有即无法拉到
    // 2.从人所在位置不回头地bfs到箱子即1的所有邻点，用dis1数组记录到这些点的最短距离，注意过程中不能经过箱子
    // 3.从终点n开始不回头地bfs到箱子即1的所有邻点，用dis2数组记录到这些点的最短距离，如果遍历到邻点但是上一次位置在箱子即1处，则此次不记录
    // 4.思路3中，bfs访问同一点不超过2次（但是访问箱子即1的次数不超过1次），可用vis数组记录
    // 5.答案即为对于每一个箱子的邻点i，取dis1[i]+dis2[i]+1的min值（+1是因为dis2是由终点开始bfs得到的，但是人走到终点后还要再走一步箱子才能到达终点）

    int t;
    cin >> t;
    while (t--)
    {
        int n, m, x;
        cin >> n >> m >> x;
        vector<vector<int>> e(n + 1);
        vector<bool> neighbour(n + 1, 0);
        vector<int> dis1(n + 1, 1e9);
        vector<int> dis2(n + 1, 1e9);
        int u, v;
        for (int i = 1; i <= m; i++)
        {
            cin >> u >> v;
            e[u].push_back(v);
            e[v].push_back(u);
            if (u == 1)
            {
                neighbour[v] = 1;
            }
            if (v == 1)
            {
                neighbour[u] = 1;
            }
        }
        if (e[n].size() < 2)
        {
            cout << "Boring Game\n";
            continue;
        }
        vector<int> vis(n + 1, 0);
        queue<int> q;
        q.push(x);
        int cnt = 0;
        if (neighbour[x] == 1)
        {
            dis1[x] = cnt;
        }
        vis[x] = 1;
        while (!q.empty())
        {
            cnt++;
            int _siz = q.size();
            while (_siz--)
            {
                int tmp = q.front();
                q.pop();
                for (auto adj : e[tmp])
                {
                    if (vis[adj] == 1 || adj == 1)
                    {
                        continue;
                    }
                    vis[adj] = 1;
                    if (neighbour[adj] == 1)
                        dis1[adj] = cnt;
                    q.push(adj);
                }
            }
        }
        for (int i = 1; i <= n; i++)
        {
            vis[i] = 0;
        }
        cnt = 0;
        // pair.first记录当前点，pair.second记录上一个点
        queue<pair<int, int>> q2;
        q2.push({n, 0});
        if (neighbour[n] == 1)
        {
            dis2[n] = cnt;
        }
        vis[n]++;
        while (!q2.empty())
        {
            cnt++;
            int _siz = q2.size();
            while (_siz--)
            {
                auto tmp = q2.front();
                q2.pop();
                for (auto adj : e[tmp.first])
                {
                    if (adj == tmp.second)
                    {
                        continue;
                    }
                    if (vis[adj] == 2)
                    {
                        continue;
                    }
                    if (vis[adj] == 1 && adj == 1)
                    {
                        continue;
                    }
                    vis[adj]++;
                    if (neighbour[adj] == 1 && tmp.first != 1)
                        dis2[adj] = min(cnt, dis2[adj]);
                    q2.push({adj, tmp.first});
                }
            }
        }
        int ans = 2e9;
        for (int i = 1; i <= n; i++)
        {
            if (neighbour[i] == 1)
            {
                ans = min(ans, dis1[i] + dis2[i] + 1);
            }
        }
        if (ans > 1e9)
        {
            cout << "Boring Game\n";
        }
        else
        {
            cout << "Vegetable fallleaves\n";
            cout << ans << '\n';
        }
    }

    return 0;
}
