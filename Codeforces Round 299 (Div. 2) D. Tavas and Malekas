#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using u64 = unsigned long long;

template <class T>
T mypow(T n, int k, T r = 1)
{
    for (; k; k >>= 1, n *= n)
    {
        if (k & 1)
            r *= n;
    }
    return r;
}
template <int MOD>
struct Zmod
{
    int x;
    Zmod(int x = 0) : x(norm(x % MOD)) {}
    int val() const { return x; }
    int norm(int x) const { return (x + MOD) % MOD; }
    Zmod operator-() const
    {
        int val = norm(MOD - x);
        return Zmod(val);
    }
    Zmod &operator++() { return x = norm(x + 1), *this; }
    Zmod &operator--() { return x = norm(x - 1), *this; }
    Zmod inv() const
    {
        assert(x != 0);
        return mypow(*this, MOD - 2);
    }
    Zmod &operator*=(const Zmod &i) { return x = 1LL * x * i.x % MOD, *this; }
    Zmod &operator+=(const Zmod &i) { return x = norm(x + i.x), *this; }
    Zmod &operator-=(const Zmod &i) { return x = norm(x - i.x), *this; }
    Zmod &operator/=(const Zmod &i) { return *this *= i.inv(); }
    Zmod &operator%=(const int &i) { return x %= i, *this; }
    friend Zmod operator*(const Zmod &i, const Zmod &j)
    {
        Zmod res = i;
        res *= j;
        return res;
    }
    friend Zmod operator+(const Zmod &i, const Zmod &j)
    {
        Zmod res = i;
        res += j;
        return res;
    }
    friend Zmod operator-(const Zmod &i, const Zmod &j)
    {
        Zmod res = i;
        res -= j;
        return res;
    }
    friend Zmod operator/(const Zmod &i, const Zmod &j)
    {
        Zmod res = i;
        res /= j;
        return res;
    }

    friend Zmod operator%(const Zmod &i, const int &j)
    {
        Zmod res = i;
        res %= j;
        return res;
    }
    friend auto &operator>>(istream &it, Zmod &j)
    {
        int v;
        it >> v;
        j = Zmod(v);
        return it;
    }
    friend auto &operator<<(ostream &o, const Zmod &j) { return o << j.x; }
    bool operator<(const Zmod &i) const { return x < i.x; }
    bool operator>(const Zmod &i) const { return x > i.x; }
    bool operator==(const Zmod &i) const { return x == i.x; }
    bool operator!=(const Zmod &i) const { return x != i.x; }
};
const int MOD = 998244353;
using Z = Zmod<MOD>;

const int N = 1 << 21;
static const int mod1 = 1e9 + 409;
static const int mod2 = 1e9 + 411;
int base1, base2;
using U = Zmod<mod1>;
using V = Zmod<mod2>;
vector<U> val1;
vector<V> val2;
void init(int n = N)
{
    mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
    uniform_int_distribution<int> uid(313, 1e9);
    uniform_int_distribution<int> uid2(333, 5e8);
    base1 = uid(rng);
    base2 = uid2(rng);
    val1.resize(n + 1), val2.resize(n + 1);
    val1[0] = 1, val2[0] = 1;
    for (int i = 1; i <= n; i++)
    {
        val1[i] = val1[i - 1] * base1;
        val2[i] = val2[i - 1] * base2;
    }
}
struct String
{
    vector<U> hash1;
    vector<V> hash2;
    string s;
    String(string s_) : s(s_), hash1{1}, hash2{1}
    {
        for (auto it : s)
        {
            hash1.push_back(hash1.back() * base1 + it);
            hash2.push_back(hash2.back() * base2 + it);
        }
    }
    pair<U, V> get() // 输出整串的哈希值
    {
        return {hash1.back(), hash2.back()};
    }
    pair<U, V> substring(int l, int r) // 输出子串的哈希值
    {
        if (l > r)
            swap(l, r);
        U ans1 = hash1[r + 1] - hash1[l] * val1[r - l + 1];
        V ans2 = hash2[r + 1] - hash2[l] * val2[r - l + 1];
        return {ans1, ans2};
    }
    pair<U, V> modify(int idx, char x) // 修改 idx 位为 x
    {
        int n = s.size() - 1;
        U ans1 = hash1.back() + val1[n - idx] * (x - s[idx]);
        V ans2 = hash2.back() + val2[n - idx] * (x - s[idx]);
        return {ans1, ans2};
    }
};

int qpow(int a, int b, int p)
{
    int res = 1;
    while (b)
    {
        if (b & 1)
            res = 1LL * res * a % p;
        a = 1LL * a * a % p;
        b >>= 1;
    }
    return res;
}

void solve()
{
    int n, m;
    cin >> n >> m;
    string p;
    cin >> p;
    int len = p.size();
    init(len);
    String hash_val(p);
    int cnt = 0;
    int cur = 0;
    bool ok = 1;
    for (int i = 1; i <= m; i++)
    {
        int x;
        cin >> x;
        if (x > cur)
        {
            cnt += x - cur - 1;
        }
        else
        {
            int tmp = cur - x;
            if (hash_val.substring(0, tmp) != hash_val.substring(len - tmp - 1, len - 1))
            {
                ok = 0;
            }
        }
        cur = x + len - 1;
    }
    cnt += n - cur;
    if (ok == 0)
    {
        cout << 0 << '\n';
    }
    else
    {
        cout << qpow(26, cnt, 1e9 + 7) << '\n';
    }
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int T = 1;
    // cin >> T;
    while (T--)
    {
        solve();
    }

    return 0;
}
