#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using u64 = unsigned long long;

void solve()
{
    int n;
    cin >> n;
    vector<pair<double, i64>> a(n + 1);
    vector<i64> pre(n + 2, 0), suf(n + 2, 0);
    for (int i = 1; i <= n; i++)
    {
        cin >> a[i].first >> a[i].second;
    }

    sort(a.begin() + 1, a.begin() + n + 1, greater<pair<double, i64>>());
    int cnt = 0;
    for (int i = 1; i <= n; i++)
    {
        if (i == 1 || fabs(a[i].first - a[i - 1].first) > 1e-10)
            a[++cnt] = a[i];
        else
            a[cnt].second += a[i].second;
    }
    n = cnt;
    for (int i = 1; i <= n; i++)
    {
        pre[i] = pre[i - 1] + a[i].second;
    }
    for (int i = n; i >= 1; i--)
    {
        suf[i] = suf[i + 1] + a[i].second;
    }

    double ans = 0.0;
    for (int i = 1, p = n; i <= n; i++)
    {
        while (p > i && pre[i] / a[i].first > suf[p] / (1.0 - a[p].first))
        {
            p--;
        }
        ans = max(ans, 0.0 + pre[i] + suf[p + 1] - pre[i] / a[i].first);
        if (i >= p)
        {
            break;
        }
        ans = max(ans, 0.0 + pre[i] + suf[p] - suf[p] / (1.0 - a[p].first));
    }
    cout << fixed << setprecision(8) << ans << '\n';
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int T = 1;
    // cin >> T;
    while (T--)
    {
        solve();
    }

    return 0;
}
