#include <bits/stdc++.h>
using namespace std;
#define int long long
using i64 = long long;
using u64 = unsigned long long;

template <typename T>
struct Fenwick
{
    int n;
    vector<T> a;
    Fenwick(int n_ = 0)
    {
        init(n_);
    }
    void init(int n_)
    {
        n = n_;
        a.assign(n, T{});
    }
    void add(int x, const T &v)
    {
        for (int i = x + 1; i <= n; i += i & -i)
        {
            a[i - 1] = a[i - 1] + v;
        }
    }
    T sum(int x)
    {
        T ans{};
        for (int i = x; i > 0; i -= i & -i)
        {
            ans = ans + a[i - 1];
        }
        return ans;
    }
    T rangeSum(int l, int r)
    {
        return sum(r + 1) - sum(l);
    }
};

void solve()
{
    int n;
    cin >> n;
    string s;
    cin >> s;
    vector<int> p(n + 1, 0);
    for (int i = 1; i <= n; i++)
    {
        p[i] = p[i - 1] + ((s[i - 1] == '1') ? -3 : 1);
    }
    vector<Fenwick<int>> tr(4);
    for (int i = 0; i < 4; i++)
    {
        tr[i].init(4 * n + 1);
    }
    int val[4] = {0, 1, 1, -2};
    int ans = 0;
    for (int i = 0; i <= n; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            int pos = (i - j + 4) % 4;
            int tmp = p[i] - val[pos] + 3 * n;
            if (tmp >= 0)
            {
                ans += tr[j].sum(min(tmp, 4 * n));
            }
        }
        tr[i % 4].add(p[i] + 3 * n, 1);
    }
    cout << ans << '\n';
}

signed main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int T = 1;
    // cin >> T;
    while (T--)
    {
        solve();
    }

    return 0;
}
